name: Full CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}
  CONTAINER_NAME: my-app-container

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      deploy-tag: ${{ steps.tag.outputs.DEPLOY_TAG }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} # or use secrets.GHCR_PAT if needed

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=${{ github.ref_name }}-

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            APP_VERSION=${{ github.sha }}

      - name: Extract deployable tag
        id: tag
        run: |
          echo "DEPLOY_TAG=$(echo '${{ steps.meta.outputs.tags }}' | tr ',' '\n' | grep '${{ github.ref_name }}-' | head -n1)" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to EC2
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to EC2 instance via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # Log in to GHCR on EC2
            echo "${{ secrets.GITHUB_TOKEN }}" | sudo docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin
            
            # Pull the specific deploy image
            sudo docker pull ${{ needs.build.outputs.deploy-tag }}

            # Stop and remove the existing container if it exists
            sudo docker stop $CONTAINER_NAME || true
            sudo docker rm $CONTAINER_NAME || true

            # Start the container from the new image
            sudo docker run -d --name $CONTAINER_NAME --restart always -p 3000:3000 \
              -e APP_VERSION=${{ github.sha }} \
              ${{ needs.build.outputs.deploy-tag }}

            # Clean up unused images
            sudo docker image prune -a -f

